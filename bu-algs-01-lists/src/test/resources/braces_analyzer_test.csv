Input, Expected result
(), true
)(, false
(a + b + c[1]) = <x + y> {}, true
(a + [b)], false
packagecom.bu.algs;importcom.bu.algs.impl.BuStackImpl;importjava.util.stream.Stream;publicclassBracesAnalyzer{privatestaticfinalBracesPARENTHESES=newBraces('(';')');privatestaticfinalBracesCURLY_BRACES=newBraces('{';'}');privatestaticfinalBracesSQUARE_BRACKETS=newBraces('[';']');privatestaticfinalBracesANGLE_BRACKETS=newBraces('<';'>');privatestaticfinalBraces[]BRACES={PARENTHESES;CURLY_BRACES;SQUARE_BRACKETS;ANGLE_BRACKETS};publicbooleanbracesCorrect(Strings){BuStack<Character>stack=newBuStackImpl<>();for(charc:s.toCharArray()){if(isOpenBrace(c)){stack.push(c);}if(isCloseBrace(c)){if(stack.isEmpty()){returnfalse;}charopen=stack.pop();charexpectedOpen=getExpectedOpenBrace(c);if(open!=expectedOpen){returnfalse;}}}returntrue;}privatestaticbooleanisOpenBrace(charc){returnStream.of(BRACES).anyMatch(brace->c==brace.open);}privatestaticbooleanisCloseBrace(charc){returnStream.of(BRACES).anyMatch(brace->c==brace.close);}privatestaticchargetExpectedOpenBrace(charcloseBrace){returnStream.of(BRACES).filter(brace->brace.close==closeBrace).map(Braces::getOpen).findAny().orElseThrow(()->newIllegalStateException("Notfoundopenbraceforclose"+closeBrace));}privatestaticclassBraces{privatefinalcharopen;privatefinalcharclose;publicBraces(charopen;charclose){this.open=open;this.close=close;}publicchargetOpen(){returnopen;}}},true
